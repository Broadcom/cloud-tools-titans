resources:
  - name: myapp-ingress
    "@type": type.googleapis.com/envoy.config.listener.v3.Listener
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 9443
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          access_log:
            name: envoy.access_loggers.file
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /logs/envoy.log
              log_format:
                text_format: |
                   {"from": "%DOWNSTREAM_PEER_SUBJECT%", "start-time": "%START_TIME%", "envoy-direction": "inbound-downstream", "method": "%REQ(:METHOD)%", "path": "%REQ(:PATH)%", "authority": "%REQ(:AUTHORITY)%", "protocol": "%PROTOCOL%", "response-code": "%RESPONSE_CODE%", "duration": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%", "flags": "%RESPONSE_FLAGS%", "upstream-cluster": "%UPSTREAM_CLUSTER%", "upstream-address": "%UPSTREAM_HOST%", "bytes-sent": "%BYTES_SENT%", "bytes-received": "%BYTES_RECEIVED%", "customerId": "%REQ(X-EPMP-CUSTOMER-ID)%", "domainId": "%REQ(X-EPMP-DOMAIN-ID)%", "partitionId": "%REQ(X-EPMP-PARTITION-ID)%", "authCustomerId": "%REQ(X-AUTH-CUSTOMER-ID)%", "authDomainId": "%REQ(X-AUTH-DOMAIN-ID)%", "envoy-request-id": "%REQ(X-REQUEST-ID)%", "sessionId": "%REQ(X-EPMP-SESSION-ID)%", "x-auth-audit-event": "%REQ(X-AUTH-AUDIT-EVENT)%", "x-auth-audit-sp":"%REQ(X-AUTH-AUDIT-SP)%","x-auth-resp-audit-event": "%RESP(X-AUTH-RESP-AUDIT-EVENT)%","response-code-detail": "%RESPONSE_CODE_DETAILS%", "x-ratelimit-limit": "%RESP(X-RATELIMIT-LIMIT)%", "x-ratelimit-remaining": "%RESP(X-RATELIMIT-REMAINING)%", "x-ratelimit-reset": "%RESP(X-RATELIMIT-RESET)%"}
            filter:
              not_health_check_filter: {}
          use_remote_address: true
          stat_prefix: ingress-proxy
          server_name: myapp-ingress
          normalize_path: true
          merge_slashes: true
          path_with_escaped_slashes_action: UNESCAPE_AND_FORWARD
          preserve_external_request_id: true
          
          http2_protocol_options:
            allow_connect: true
            max_concurrent_streams: 1024
            initial_connection_window_size: 1048576
            initial_stream_window_size: 65536
          http_filters:
          
          - name: envoy.filters.http.health_check
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
              cluster_min_healthy_percentages:
                local-myapp:
                  value: 100
              headers:
              - name: :path
                exact_match: /healthz
              pass_through_mode: false
          
          
          - name: envoy.filters.http.jwt_authn
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
              providers:
              rules:
              - match:
                  prefix: /
                requires:
                  requires_any:
                    requirements:
          
          - name: envoy.filters.http.enrichment
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
              config:
                fail_open: false      
                configuration:
                  "@type": type.googleapis.com/google.protobuf.StringValue
                  value: |
                    {
                      "actions": [
                        {
                          "action": "extract",
                          "from": "token.privs",
                          "match_headers": [
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "sw",
                              "value": "/authmgmt/v3/privilegesets/"
                            }
                          ],
                          "to": "x-epmp-jwt-privs"
                        },
                        {
                          "action": "extract",
                          "from": "token.scope",
                          "match_headers": [
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "sw",
                              "value": "/authmgmt/v3/privilegesets/"
                            }
                          ],
                          "to": "x-epmp-jwt-scope"
                        },
                        {
                          "action": "extract",
                          "from": "token.domain_id",
                          "match_headers": [
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "sw",
                              "value": "/authmgmt/v3/privilegesets/"
                            }
                          ],
                          "to": "x-epmp-jwt-domain"
                        },
                        {
                          "action": "extract",
                          "from": "token.uri",
                          "match_headers": [
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "sw",
                              "value": "/authmgmt/v3/privilegesets/"
                            }
                          ],
                          "to": "x-epmp-jwt-uri"
                        },
                        {
                          "action": "extract",
                          "from": "token.roles",
                          "match_headers": [
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "sw",
                              "value": "/authmgmt/v3/privilegesets/"
                            }
                          ],
                          "to": "x-epmp-jwt-roles"
                        }
                      ],
                      "audits": [
                        {
                          "additional_info": [
                            "request.body[name]",
                            "request.body[visibility]",
                            "response.body[qrn]",
                            "response.body[id]"
                          ],
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/roles"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ]
                        },
                        {
                          "additional_info": [
                            "request.body[name]",
                            "request.body[visibility]",
                            "response.body[qrn]",
                            "response.body[id]"
                          ],
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "PUT"
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "DELETE"
                            }
                          ]
                        },
                        {
                          "additional_info": [
                            "request.body[associations]"
                          ],
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+/members$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+/members$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "DELETE"
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+/members/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "DELETE"
                            }
                          ]
                        },
                        {
                          "additional_info": [
                            "request.body",
                            "response.body[id]"
                          ],
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/authorizations"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ]
                        },
                        {
                          "additional_info": [
                            "request.body"
                          ],
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/authorizations/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "PATCH"
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/authorizations/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "DELETE"
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/authorizations/[^/]+/claims$\""
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ]
                        }
                      ],
                      "auth_host": "local-myapp",
                      "rbacs": [
                        {
                          "match_headers": [
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "co",
                              "value": "/.info/mesh"
                            }
                          ],
                          "policies": [
                            {
                              "name": "ams_mgmt_check",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "ams_mgmt"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "GET"
                            },
                            {
                              "invert": true,
                              "name": ":path",
                              "pattern": "co",
                              "value": "/.info/mesh"
                            }
                          ],
                          "policies": [
                            {
                              "name": "read_with_system_scope",
                              "rules": [
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "read_with_customer_scope",
                              "rules": [
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "read_with_default_domain_scope",
                              "rules": [
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/roles"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "create_role_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "rop": "domain"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_4",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "ex"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_5",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_6",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_7",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "rop": "domain"
                                }
                              ]
                            },
                            {
                              "name": "create_role_policy_8",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "ex"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "PUT"
                            }
                          ],
                          "policies": [
                            {
                              "name": "update_role_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "rop": "domain"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_4",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "ex"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_5",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_6",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "val": "global"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_7",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "lop": "request.body[visibility]",
                                  "op": "eq",
                                  "rop": "domain"
                                }
                              ]
                            },
                            {
                              "name": "update_role_policy_8",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                },
                                {
                                  "inv": true,
                                  "lop": "request.body[visibility]",
                                  "op": "ex"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "DELETE"
                            }
                          ],
                          "policies": [
                            {
                              "name": "delete_role_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "delete_role_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "delete_role_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_roles"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            },
                            {
                              "name": "delete_role_policy_4",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "delete_role_policy_5",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "delete_role_policy_6",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "write_any_role"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/roles/[^/]+/members"
                            },
                            {
                              "invert": true,
                              "name": ":method",
                              "pattern": "eq",
                              "value": "GET"
                            }
                          ],
                          "policies": [
                            {
                              "name": "assign_role_member_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "assign_role_member_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "assign_role_member_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_role_member"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            },
                            {
                              "name": "assign_role_member_policy_4",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_any_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "assign_role_member_policy_5",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_any_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "assign_role_member_policy_6",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_any_role_member"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/user-groups-associations"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "PUT"
                            }
                          ],
                          "policies": [
                            {
                              "name": "associate_user_groups_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "associate_user_groups_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "associate_user_groups_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_role_member"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            },
                            {
                              "name": "associate_user_groups_policy_4",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "assign_any_role_member"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/authorizations"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "create_authorization_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "create_authorization_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/authorizations/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "PATCH"
                            }
                          ],
                          "policies": [
                            {
                              "name": "modify_authorization_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "modify_authorization_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/authorizations/[^/]+$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "DELETE"
                            }
                          ],
                          "policies": [
                            {
                              "name": "delete_authorization_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "delete_authorization_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "delete_authorization_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "manage_domain"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "regex",
                              "value": "/authmgmt/v3/authorizations/[^/]+/claims$"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "claim_authorization_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "claim_authorization"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "claim_authorization_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "claim_authorization"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/revocations"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "revocations_policy_1",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "revoke_access"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            },
                            {
                              "name": "revocations_policy_2",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "revoke_access"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "customer"
                                },
                                {
                                  "lop": "request.token[customer_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-customer-id]"
                                }
                              ]
                            },
                            {
                              "name": "revocations_policy_3",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "revoke_access"
                                },
                                {
                                  "lop": "request.token[domain_id]",
                                  "op": "eq",
                                  "rop": "request.headers[x-epmp-domain-id]"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/maintenance/deprovision"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "deprovisioning_policy",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "epmp_internal_access"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/maintenance/v1/domain_remapping"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "domain_remapping_policy",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "domain_remapping"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "match_headers": [
                            {
                              "name": ":path",
                              "pattern": "eq",
                              "value": "/authmgmt/v3/maintenance/orphan_data"
                            },
                            {
                              "name": ":method",
                              "pattern": "eq",
                              "value": "POST"
                            }
                          ],
                          "policies": [
                            {
                              "name": "orphan_data_cleanup_policy",
                              "rules": [
                                {
                                  "lop": "request.token[privs]",
                                  "op": "co",
                                  "val": "epmp_internal_access"
                                },
                                {
                                  "lop": "request.token[scope]",
                                  "op": "co",
                                  "val": "system"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                name: sps.proxy.wasm.enrichment.filter
                root_id: wasm_filters
                vm_config:
                  vm_id: vm.wasm_filters
                  runtime: "envoy.wasm.runtime.v8"
                  allow_precompiled: true
                  code:
                    local:
                      filename: "/envoy/envoy_proxy_wasm_enrichment_filter.wasm"
          
            
            
          
          - name: envoy.filters.http.router
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              upstream_log:
              - name: envoy.file_access_log
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                  path: /logs/envoy.log
                  log_format:
                    text_format: |
                      {"start-time": "%START_TIME%", "envoy-direction": "inbound-upstream", "method": "%REQ(:METHOD)%", "path": "%REQ(:PATH)%", "authority": "%REQ(:AUTHORITY)%", "protocol": "%PROTOCOL%", "response-code": "%RESPONSE_CODE%", "flags": "%RESPONSE_FLAGS%", "upstream-cluster": "%UPSTREAM_CLUSTER%", "upstream-address": "%UPSTREAM_HOST%", "bytes-sent": "%BYTES_SENT%", "bytes-received": "%BYTES_RECEIVED%", "customerId": "%REQ(X-EPMP-CUSTOMER-ID)%", "domainId": "%REQ(X-EPMP-DOMAIN-ID)%", "partitionId": "%REQ(X-EPMP-PARTITION-ID)%", "authCustomerId": "%REQ(X-AUTH-CUSTOMER-ID)%", "authDomainId": "%REQ(X-AUTH-DOMAIN-ID)%", "envoy-request-id": "%REQ(X-REQUEST-ID)%", "sessionId": "%REQ(X-EPMP-SESSION-ID)%", "x-auth-audit-sp":"%REQ(X-AUTH-AUDIT-SP)%","response-code-detail": "%RESPONSE_CODE_DETAILS%", "x-ratelimit-limit": "%RESP(X-RATELIMIT-LIMIT)%", "x-ratelimit-remaining": "%RESP(X-RATELIMIT-REMAINING)%", "x-ratelimit-reset": "%RESP(X-RATELIMIT-RESET)%"}
                filter:
                  not_health_check_filter: {}
          route_config:
            name: myapp-ingress
            internal_only_headers:
            - x-envoy-original-path
            request_headers_to_add: []
            virtual_hosts:
            - domains: '*'
              name: myapp-ingress
            
              virtual_clusters:
              - name: create_role
              
              
                headers:
                - name: :path
                  exact_match: '/authmgmt/v3/roles'
                - name: :method
                  exact_match: 'POST'
              - name: update_role
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/roles/[^/]+$'
                - name: :method
                  exact_match: 'PUT'
              - name: delete_role
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/roles/[^/]+$'
                - name: :method
                  exact_match: 'DELETE'
              - name: get_role
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/roles/[^/]+$'
                - name: :method
                  exact_match: 'GET'
              - name: search_roles
              
              
                headers:
                - name: :path
                  exact_match: '/authmgmt/v3/roles'
                - name: :method
                  exact_match: 'GET'
              - name: assign_role_member
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/roles/[^/]+/members$'
                - name: :method
                  exact_match: 'POST'
              - name: delete_role_members
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/roles/[^/]+/members$'
                - name: :method
                  exact_match: 'DELETE'
              - name: delete_role_member
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/roles/[^/]+/members/[^/]+$'
                - name: :method
                  exact_match: 'DELETE'
              - name: create_authorization
              
              
                headers:
                - name: :path
                  exact_match: '/authmgmt/v3/authorizations'
                - name: :method
                  exact_match: 'POST'
              - name: patch_authorization
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/authorizations/[^/]+$'
                - name: :method
                  exact_match: 'PATCH'
              - name: delete_authorization
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/authorizations/[^/]+$'
                - name: :method
                  exact_match: 'DELETE'
              - name: claim_authorization
              
              
                headers:
                - name: :path
                  safe_regex_match:
                    google_re2: {}
                    regex: '/authmgmt/v3/authorizations/[^/]+/claims$"'
                - name: :method
                  exact_match: 'POST'
              - name: "_all_"
              
              
                headers:
                - name: :path
                  prefix_match: '/'
            
              rate_limits: []
              routes:
              - match:
                  prefix: /
                route:
                  cluster: local-myapp
                  retry_policy:
                    num_retries: 1
                    retry_on: reset,connect-failure,refused-stream,retriable-status-codes
                  timeout: 15s
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificate_sds_secret_configs:
            - name: tls_sds
              sds_config:
                path: /envoy/config/envoy-sds.yaml
            validation_context: {}
            alpn_protocols:
            - h2
            - http/1.1

