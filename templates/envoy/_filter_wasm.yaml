{{- define "titan-mesh-helm-lib-chart.envoy.filter.enrichment" }}
  {{- $clusters := .clusters }}
  {{- $requests := .requests  }}
  {{- $envoy := .envoy }}
  {{- $enrich := mergeOverwrite (deepCopy ($envoy.enrich | default dict)) ($requests.enrich | default dict) -}}
  {{- $localMyApp := .localMyApp  }}

  {{- $gateway := $localMyApp.gateway }}
  {{- $gatewayEnable := $gateway.enabled }}
  {{- $routes := list }}
  {{- if $gatewayEnable }}
    {{- range $cn, $cv := $clusters }}
      {{- if and (ne $cn "local-myapp") (ne $cn "remote-myapp") }}
        {{- range $cv.routes }}
          {{- $routes = append $routes . }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- else }}
    {{- $routes = $requests.routes }}
    {{- if and $requests (not $routes) }}
      {{- if ternary $requests.enabled true (hasKey $requests "enabled") }}
        {{ $routes = $localMyApp.routes }}
      {{- end }}
    {{- end }}
    {{- $additionalRoutes := $requests.additionalRoutes }}
    {{- if $additionalRoutes }}
      {{- if $routes }}
        {{- $routes = concat $additionalRoutes $routes }}
      {{- else }}
        {{- $routes = $additionalRoutes }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- $enableEnrichment := false  }}
  {{- if hasKey $enrich "actions" }}
    {{- range $enrich.actions }}
      {{- $enableEnrichment = true  }}
    {{- end }}
  {{- else }}
    {{- $actions := list }}
    {{- range $routes }}
      {{- $match := .match }}
      {{- $headerMatches := list }}
      {{- $pathPrefix := $match.prefix | default "" }}
      {{- $pathMatch := $match.path | default "" }}
      {{- $pathRegex := $match.regex | default "" }}
      {{- $method := $match.method | default "" }}
      {{- if ne $pathPrefix "" }}
        {{- $hdr := dict "name" ":path" }}
        {{- $_ := set $hdr "pattern" "sw" }}
        {{- $_ := set $hdr "value" $pathPrefix }}
        {{- $headerMatches = append $headerMatches $hdr }}
      {{- end }}
      {{- if ne $pathMatch "" }}
        {{- $hdr := dict "name" ":path" }}
        {{- $_ := set $hdr "pattern" "eq" }}
        {{- $_ := set $hdr "value" $pathMatch }}
        {{- $headerMatches = append $headerMatches $hdr }}
      {{- end }}
      {{- if ne $pathRegex "" }}
        {{- $hdr := dict "name" ":path" }}
        {{- $_ := set $hdr "pattern" "regex" }}
        {{- $_ := set $hdr "value" $pathRegex }}
        {{- $headerMatches = append $headerMatches $hdr }}        
      {{- end }}
      {{- if ne $method "" }}
        {{- $hdr := dict "name" ":method" }}
        {{- $_ := set $hdr "pattern" "eq" }}
        {{- $_ := set $hdr "value" $method }}
        {{- $headerMatches = append $headerMatches $hdr }}        
      {{- end }}
      {{- range $match.headers }}
        {{- $hdr := dict "name" .key }}
        {{- if .eq }}
          {{- $_ := set $hdr "pattern" "eq" }}
          {{- $_ := set $hdr "value" .eq }}
        {{- else if .neq }}
          {{- $_ := set $hdr "pattern" "eq" }}
          {{- $_ := set $hdr "value" .neq }}
          {{- $_ := set $hdr "invert" true }}
        {{- else if .sw }}
          {{- $_ := set $hdr "pattern" "sw" }}
          {{- $_ := set $hdr "value" .sw }}
        {{- else if .nsw }}
          {{- $_ := set $hdr "pattern" "sw" }}
          {{- $_ := set $hdr "value" .sw }}
          {{- $_ := set $hdr "invert" true }}
        {{- else if .ew }}
          {{- $_ := set $hdr "pattern" "ew" }}
          {{- $_ := set $hdr "value" .ew }}
        {{- else if .new }}
          {{- $_ := set $hdr "pattern" "ew" }}
          {{- $_ := set $hdr "value" .new }}
          {{- $_ := set $hdr "invert" true }}
        {{- else if .co }}
          {{- $_ := set $hdr "pattern" "co" }}
          {{- $_ := set $hdr "value" .co }}
        {{- else if .nco }}
          {{- $_ := set $hdr "pattern" "co" }}
          {{- $_ := set $hdr "value" .nco }}
          {{- $_ := set $hdr "invert" true }}
        {{- else if .lk }}
          {{- $_ := set $hdr "pattern" "regex" }}
          {{- $_ := set $hdr "value" .lk }}
        {{- else if .nlk }}
          {{- $_ := set $hdr "pattern" "regex" }}
          {{- $_ := set $hdr "value" .nlk }}
          {{- $_ := set $hdr "invert" true }}
        {{- end }}
        {{- $headerMatches = append $headerMatches $hdr }}
      {{- end }}
      {{- if (hasKey . "enrich") }}
        {{- range .enrich.actions }}
          {{- $enableEnrichment = true }}
          {{- $_ := set . "match_headers" $headerMatches }}
          {{- $actions = append $actions . }}
        {{- end }}
      {{- end }}
    {{- end  }}
    {{- if gt (len $actions) 0 }}
      {{- $ := set $enrich "actions" $actions }}
    {{- end }}
  {{- end }}
  {{- $enableEnrichment = ternary (and $enrich.enabled $enableEnrichment) $enableEnrichment (hasKey $enrich "enabled") }}
  {{- if $enableEnrichment }}
- name: envoy.filters.http.enrichment
  typed_config:
    "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
    config:
    {{- $enrichfilterFailOpen := "false" }}
    {{- if $envoy.enrichfilter }}
      {{- if hasKey $envoy.enrichfilter "failedOpen" }}
        {{- $enrichfilterFailOpen = $envoy.enrichfilter.failedOpen }}
      {{- end }}    
    {{- end }}
      fail_open: {{ $enrichfilterFailOpen | default "false" }}      
      configuration:
        "@type": type.googleapis.com/google.protobuf.StringValue
{{ print "value: |" | indent 8 }}
{{ toPrettyJson $enrich | indent 10 }}
    {{- $enrichfilterName := "envoy_proxy_wasm_enrichment_filter.wasm" }}
    {{- $enrichfilterAllowedPrecompiled := "true" }}
    {{- $enrichfilterWasmRuntime := "envoy.wasm.runtime.v8" }}
    {{- if $envoy.enrichfilter }}
      {{- if $envoy.enrichfilter.filename }}
        {{- $enrichfilterName = $envoy.enrichfilter.filename }}
      {{- end }}
      {{- if $envoy.enrichfilter.wasmRuntime }}
        {{- $enrichfilterWasmRuntime = $envoy.enrichfilter.wasmRuntime }}
      {{- end }}
      {{- if hasKey $envoy.enrichfilter "allowPrecompiled" }}
        {{- $enrichfilterAllowedPrecompiled = $envoy.enrichfilter.allowPrecompiled }}
      {{- end }}    
    {{- end }}
      name: sps.proxy.wasm.enrichment.filter
      root_id: enrichment
      vm_config:
        vm_id: vm.enrichment
        runtime: {{ $enrichfilterWasmRuntime | quote }}
        allow_precompiled: {{ $enrichfilterAllowedPrecompiled }}
        code:
          local:
            filename: {{ printf "/envoy/%s" $enrichfilterName | quote }}        
  {{- end }}
{{- end }}
