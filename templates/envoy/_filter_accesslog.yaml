{{- define "titan-mesh-helm-lib-chart.envoy.filter.accesslog" }}
  {{- $titanSideCars := .titanSideCars }}
  {{- $direction := .direction -}}
  {{- $ingress := $titanSideCars.ingress }}
  {{- $egress := $titanSideCars.egress }}
  {{- $envoy := $titanSideCars.envoy }}
  {{- $logs := $titanSideCars.logs  }}
  {{- $logsLevel := $logs.level | default "info" }}
  {{- $logType := $logs.type | default "file" -}}
typed_config:
  "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
  path: {{ printf "%s" (ternary (printf "%s/envoy.log" ($envoy.logFolderPath | default "/logs")) "/dev/stdout" (eq $logType "file")) }}
  log_format:
  {{- if contains "downstream" $direction }}
    text_format: |
       {"from": "%DOWNSTREAM_PEER_SUBJECT%", "start-time": "%START_TIME%", "envoy-direction": "{{ $direction }}", "method": "%REQ(:METHOD)%", "path": "%REQ(:PATH)%", "authority": "%REQ(:AUTHORITY)%", "protocol": "%PROTOCOL%", "response-code": "%RESPONSE_CODE%", "duration": "%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%", "flags": "%RESPONSE_FLAGS%", "upstream-cluster": "%UPSTREAM_CLUSTER%", "upstream-address": "%UPSTREAM_HOST%", "bytes-sent": "%BYTES_SENT%", "bytes-received": "%BYTES_RECEIVED%", "customerId": "%REQ(X-EPMP-CUSTOMER-ID)%", "domainId": "%REQ(X-EPMP-DOMAIN-ID)%", "partitionId": "%REQ(X-EPMP-PARTITION-ID)%", "authCustomerId": "%REQ(X-AUTH-CUSTOMER-ID)%", "authDomainId": "%REQ(X-AUTH-DOMAIN-ID)%", "envoy-request-id": "%REQ(X-REQUEST-ID)%", "sessionId": "%REQ(X-EPMP-SESSION-ID)%", "x-auth-audit-event": "%REQ(X-AUTH-AUDIT-EVENT)%", "x-auth-audit-sp":"%REQ(X-AUTH-AUDIT-SP)%","x-auth-resp-audit-event": "%RESP(X-AUTH-RESP-AUDIT-EVENT)%","response-code-detail": "%RESPONSE_CODE_DETAILS%", "x-ratelimit-limit": "%RESP(X-RATELIMIT-LIMIT)%", "x-ratelimit-remaining": "%RESP(X-RATELIMIT-REMAINING)%", "x-ratelimit-reset": "%RESP(X-RATELIMIT-RESET)%", "x-orig-path": "%REQ(X-ORIG-PATH)%"}
  {{- else }}
    text_format: |
      {"start-time": "%START_TIME%", "envoy-direction": "{{ $direction }}", "method": "%REQ(:METHOD)%", "path": "%REQ(:PATH)%", "authority": "%REQ(:AUTHORITY)%", "protocol": "%PROTOCOL%", "response-code": "%RESPONSE_CODE%", "flags": "%RESPONSE_FLAGS%", "upstream-cluster": "%UPSTREAM_CLUSTER%", "upstream-address": "%UPSTREAM_HOST%", "bytes-sent": "%BYTES_SENT%", "bytes-received": "%BYTES_RECEIVED%", "customerId": "%REQ(X-EPMP-CUSTOMER-ID)%", "domainId": "%REQ(X-EPMP-DOMAIN-ID)%", "partitionId": "%REQ(X-EPMP-PARTITION-ID)%", "authCustomerId": "%REQ(X-AUTH-CUSTOMER-ID)%", "authDomainId": "%REQ(X-AUTH-DOMAIN-ID)%", "envoy-request-id": "%REQ(X-REQUEST-ID)%", "sessionId": "%REQ(X-EPMP-SESSION-ID)%", "x-auth-audit-sp":"%REQ(X-AUTH-AUDIT-SP)%","response-code-detail": "%RESPONSE_CODE_DETAILS%", "x-ratelimit-limit": "%RESP(X-RATELIMIT-LIMIT)%", "x-ratelimit-remaining": "%RESP(X-RATELIMIT-REMAINING)%", "x-ratelimit-reset": "%RESP(X-RATELIMIT-RESET)%"}
  {{- end }}
filter:
  {{- $accessLog := $logs.accessLog }}
  {{- $logAlways := false }}
    {{- range $accessLog.doNotFilter }}
      {{- if eq . $direction }}
        {{- $logAlways = true }}
      {{- end }}
    {{- end }}
  {{- if and (not $logAlways) (or (eq $logsLevel "error") (hasPrefix $logsLevel "warn")) }}
    {{- if $accessLog.rawFilter }}
      {{- $accessLog.rawFilter | toYaml | nindent 2 }}
    {{- else }}
  and_filter:
    filters:
    - not_health_check_filter: {}
    - or_filter:
        filters:
       {{- if $accessLog.statusCodes }}
        {{- $accessLog.statusCodes | toYaml | nindent 8 }}
       {{- else }}
        - status_code_filter:
            comparison:
              op: LE
              value:
                default_value: 199
                runtime_key: {{ $accessLog.runtimeKey | default "not-defined" }}
        - status_code_filter:
            comparison:
              op: GE
              value:
                default_value: 400
                runtime_key: {{ $accessLog.runtimeKey | default "not-defined" }}
       {{- end }}
      {{- if $accessLog.responseFlags }}
        - response_flag_filter:
            flags:
        {{- range $accessLog.responseFlags }}
            - {{ . }}
        {{- end }}
      {{- end }}
    {{- range $accessLog.headers }}
        - header_filter:
            header:
      {{- if not (or (contains "regex" .op ) (contains "range" .op )) }}
              name: {{ .name }}
              {{ snakecase .op }}: {{ .value }}
        {{- if .invert }}
              invert_match: {{ .invert }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- end }}
  {{- else }}
    {{- if $accessLog.alwaysFilter }}
      {{- $accessLog.alwaysFilter | toYaml | nindent 2 }}
    {{- else }}
  not_health_check_filter: {}
    {{- end }}
  {{- end }}
{{- end }}
