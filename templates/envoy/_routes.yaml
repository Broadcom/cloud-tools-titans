{{- define "titan-mesh-helm-lib-chart.envoy.filter.routes" }}
  {{- $titanSideCars := .titanSideCars }}
  {{- $appName := .appName -}}
  {{- $direction := .direction -}}
  {{- $validation := $titanSideCars.validation }}
  {{- $validationEnabled := false }}
  {{- if $validation }}
    {{- $validationEnabled = ternary $validation.enabled true (hasKey $validation "enabled") }}
  {{- end }}
  {{- $ingress := $titanSideCars.ingress }}
  {{- $egress := $titanSideCars.egress }}
  {{- $envoy := $titanSideCars.envoy }}
  {{- $clusters := $envoy.clusters }}

  {{- $remoteMyApp := index $clusters "remote-myapp" }}
  {{- $localMyApp := index $clusters "local-myapp" }}
  {{- $ingressRoutesFromLocalMyapp := false -}}
  {{- $gatewayEnable := false }}
  {{- $defaultBackend := "local-myapp" }}
  {{- if $localMyApp.gateway  -}}
    {{- $gatewayEnable = ternary $localMyApp.gateway.enabled true (hasKey $localMyApp.gateway "enabled") }}
    {{- if $gatewayEnable }}
      {{- $defaultBackend = ternary $localMyApp.gateway.defaultBackend "" (hasKey $localMyApp.gateway "defaultBackend") }}
    {{- end }}
  {{- end }}
                routes:
  {{- $routes := list }}
  {{- if $gatewayEnable }}
    {{- range $cn, $cv := $clusters }}
      {{- if and (ne $cn "local-myapp") (ne $cn "remote-myapp") }}
        {{- range $cv.routes }}
          {{- $newcluster := dict "cluster" $cn }}
          {{- $routes = append $routes (dict "match" .match "route" $newcluster "ratelimit" .ratelimit) }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- else }}
    {{- $routes = ternary $ingress.routes $egress.routes (eq "ingress" $direction) }}
    {{- if and (eq "ingress" $direction) (not $routes) }}
      {{- if ternary $ingress.enabled true (hasKey $ingress "enabled") }}
        {{- $routes = $localMyApp.routes -}}
        {{- $ingressRoutesFromLocalMyapp = true -}}
      {{- end }}
    {{- end }}
    {{- $additionalRoutes := ternary $ingress.additionalRoutes $egress.additionalRoutes (eq "ingress" $direction) }}
    {{- if and $additionalRoutes }}
      {{- if $routes }}
        {{- $routes = concat $additionalRoutes $routes }}
      {{- else }}
        {{- $routes = $additionalRoutes }}
      {{- end }}
    {{- end }} 
  {{- end }}
  {{- range $routes }}
    {{- $route := .route }}
    {{- $decorator := .decorator }}
    {{- if or .route .redirect .directResponse $ingressRoutesFromLocalMyapp }}
      {{- $clusterName := $route.cluster }}
      {{- if not $clusterName }}
        {{- if eq $direction "ingress" }}
          {{- if $route }}
            {{- $clusterName = "local-myapp" }}
          {{- else }}
            {{- $clusterName = "" }}
          {{- end }}
        {{- else if or .directResponse .redirect }}
          {{- $clusterName = "" }}
        {{- else }}
          {{- fail "egress route requires cluster name"}}
        {{- end }}
      {{- end }}
      {{- $cluster := ternary (index $clusters $clusterName) .empty (ne $clusterName "") }}
      {{- $retryPolicy := mergeOverwrite ($cluster.retryPolicy | default $remoteMyApp.retryPolicy | default dict) ($route.retryPolicy | default dict) }}
      {{- if or $cluster .directResponse .redirect }}
        {{- if not .match }}
          {{- $retryOn := ternary "reset,connect-failure,refused-stream,retriable-status-codes" "reset,connect-failure,refused-stream,gateway-error,retriable-status-codes" (hasPrefix "local-" $clusterName) }}   
          {{- range $cluster.routes }}
            {{- $clusterRoute := .route }}
            {{- $match := .match }}
                - match:
            {{- include "titan-mesh-helm-lib-chart.envoy.matcher-route" (dict "route" $match "routing" true) | nindent 18 }}
            {{- $queryParameters := $match.queryParameters | default $match.query_parameters }}
            {{- if $queryParameters }}
              {{- include "titan-mesh-helm-lib-chart.envoy.matcher-query-parameters" (dict "queryParameters" $queryParameters) | nindent 18 }}
            {{- end }}
            {{- $hasPerRouteFilter := false -}}
            {{- range $route.disableFilters }}
              {{- $disabledFilter := index $envoy.perRouteFilters . -}}
              {{- if $disabledFilter }}
                {{- $hasPerRouteFilter = true -}}
              {{- end -}}
            {{- end }}
            {{- if $hasPerRouteFilter }}
                  typed_per_filter_config:
              {{- range $route.disableFilters }}
                {{- $disabledFilter := index $envoy.perRouteFilters . -}}
                {{- if $disabledFilter }}
                  {{- printf "%s:" . | nindent 20 }}
                  {{- printf "%s: type.googleapis.com/%s" (print "@type" | quote) $disabledFilter.type | nindent 22 }}
                  {{- print "disabled: true" | nindent 22 }}
                {{- end }}
              {{- end -}}
            {{- end }}
            {{- if $decorator }}
                  decorator:
                    operation: {{ $decorator.operation }}
            {{- end }}
                  route:
            {{- if $clusterRoute.prefixRewrite }}
                    prefix_rewrite: {{ $clusterRoute.prefixRewrite }}
            {{- else if $clusterRoute.regexRewrite }}
                    regex_rewrite:
                      pattern:
                        google_re2: {}
                        regex: {{ $clusterRoute.regexRewrite.pattern }}
                      substitution: {{ $clusterRoute.regexRewrite.substitution }}
            {{- end }}
                    cluster: {{ $route.cluster }}
            {{- if or (eq $direction "egress") $cluster.autoHostRewrite $route.autoHostRewrite (and $validationEnabled $gatewayEnable) }}
                    auto_host_rewrite: true
            {{- end }}
                    retry_policy:
                      num_retries: {{ coalesce $retryPolicy.numRetries "1" }}
                      retry_on: {{ coalesce $retryPolicy.retryOn $retryOn }}
            {{- if $retryPolicy.retriableStatusCode }}
                      retriable_status_codes: 
              {{- range $retryPolicy.retriableStatusCode }}
                        - {{ . }}
              {{- end }}
            {{- end }}
            {{- if $retryPolicy.hostSelectionRetryMaxAttempts }}
                      host_selection_retry_max_attempts: {{ $retryPolicy.hostSelectionRetryMaxAttempts }}
            {{- end }}
                    timeout: {{ coalesce $route.timeout $clusterRoute.timeout (ternary $remoteMyApp.timeout $cluster.timeout (or $gatewayEnable (eq $direction "egress"))) "15s" }}
          {{- end  }}
        {{- else }}
          {{- $match := .match }}
                - match:
          {{- include "titan-mesh-helm-lib-chart.envoy.matcher-route" (dict "route"  $match "routing" true) | nindent 18 }}
          {{- if ne $clusterName "" }}
            {{- $retryOn := ternary "reset,connect-failure,refused-stream,retriable-status-codes" "reset,connect-failure,refused-stream,gateway-error,retriable-status-codes" (hasPrefix "local-" $clusterName) }}
            {{- $queryParameters := $match.queryParameters | default $match.query_parameters }}
            {{- if $queryParameters }}
              {{- include "titan-mesh-helm-lib-chart.envoy.matcher-query-parameters" (dict "queryParameters" $queryParameters) | nindent 18 }}
            {{- end }}
            {{- $hasPerRouteFilter := false -}}
            {{- range $route.disableFilters }}
              {{- $disabledFilter := index $envoy.perRouteFilters . -}}
              {{- if $disabledFilter }}
                {{- $hasPerRouteFilter = true -}}
              {{- end -}}
            {{- end }}
            {{- if $hasPerRouteFilter }}
                  typed_per_filter_config:
              {{- range $route.disableFilters }}
                {{- $disabledFilter := index $envoy.perRouteFilters . -}}
                {{- if $disabledFilter }}
                  {{- printf "%s:" . | nindent 20 }}
                  {{- printf "%s: type.googleapis.com/%s" (print "@type" | quote) $disabledFilter.type | nindent 22 }}
                  {{- print "disabled: true" | nindent 22 }}
                {{- end }}
              {{- end -}}
            {{- end }}
            {{- if $decorator }}
                  decorator:
                    operation: {{ $decorator.operation }}
            {{- end }}
                  route:
                    cluster: {{ $clusterName }} 
            {{- if $route.prefixRewrite }}
                    prefix_rewrite: {{ $route.prefixRewrite }}
            {{- else if $route.regexRewrite }}
                    regex_rewrite:
                      pattern:
                        google_re2: {}
                        regex: {{ $route.regexRewrite.pattern }}
                      substitution: {{ $route.regexRewrite.substitution }}
            {{- end }}
            {{- if or (eq $direction "egress") (and (eq $direction "ingress") (not (hasPrefix "local-" $clusterName)) (not $gatewayEnable)) $cluster.autoHostRewrite $route.autoHostRewrite (and $validationEnabled $gatewayEnable) }}
                    auto_host_rewrite: true
            {{- end }}
                    retry_policy:
                      num_retries: {{ coalesce $retryPolicy.numRetries "1" }}
                      retry_on: {{ coalesce $retryPolicy.retryOn $retryOn }}
            {{- if $retryPolicy.retriableStatusCode }}
                      retriable_status_codes: 
              {{- range $retryPolicy.retriableStatusCode }}
                        - {{ . }}
              {{- end }}
            {{- end }}
            {{- if $retryPolicy.hostSelectionRetryMaxAttempts }}
                      host_selection_retry_max_attempts: {{ $retryPolicy.hostSelectionRetryMaxAttempts }}
            {{- end }}
                    timeout: {{ coalesce $route.timeout (ternary $remoteMyApp.timeout $cluster.timeout (or $gatewayEnable (eq $direction "egress"))) "15s" }}
            {{- if or $route.idleTimeout $cluster.idleTimeout }}
                    idle_timeout: {{ coalesce $route.idleTimeout $cluster.idleTimeout }}
            {{- end }}
          {{- else if .directResponse }}
                  direct_response:
                    status: {{ .directResponse.status }}
            {{- if .directResponse.body }}
                    body:
                      inline_string: {{ .directResponse.body | squote }}
            {{- end }}
          {{- else if .redirect }}
                  redirect:
            {{- if eq .redirect.action "regex_rewrite" }}
                    regex_rewrite:
                      pattern:
                        google_re2: 
                          max_program_size: {{ .redirect.maxlen }}
                        regex: {{ .redirect.regex | squote }}
                      substitution: {{ .redirect.value | squote }}
            {{- else }}
                    {{ .redirect.action }}: {{ .redirect.value }}
            {{- end }}
            {{- if .redirect.responseCode }}
                    response_code: {{ .redirect.responseCode }}  
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- if eq $direction "ingress" }}
    {{- $cluster := index $envoy.clusters "local-myapp" }}
    {{- $retryPolicy := $cluster.retryPolicy }}
                - match:
                    prefix: /
    {{- if eq $defaultBackend "" }}
                  direct_response:
                    status: {{ $cluster.directResponseCode | default "404" }}
                    body:
                      inline_string: {{ ($cluster.directResponseMessage | default (printf "%s:No matching route" $appName)) | squote }}
    {{- else }}
                  route:
                    cluster: {{ $defaultBackend }}
                    retry_policy:
                      num_retries: {{ coalesce $retryPolicy.numRetries "1" }}
                      retry_on: {{ coalesce $retryPolicy.retryOn "reset,connect-failure,refused-stream,retriable-status-codes" }}
          {{- if $retryPolicy.retriableStatusCode }}
                      retriable_status_codes: 
              {{- range $retryPolicy.retriableStatusCode }}
                        - {{ . }}
              {{- end }}
          {{- end }}
          {{- if $retryPolicy.hostSelectionRetryMaxAttempts }}
                      host_selection_retry_max_attempts: {{ $retryPolicy.hostSelectionRetryMaxAttempts }}
          {{- end }}
                    timeout: {{ coalesce $cluster.timeout "15s" }}
      {{- if $cluster.idleTimeout }}
                    idle_timeout: {{ $cluster.idleTimeout }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
