{{- define "titan-mesh-helm-lib-chart.envoy.clusters" }}
  {{- $titanSideCars := .titanSideCars }}
  {{- $validation := $titanSideCars.validation -}}
  {{- $validationEnabled := false -}}
  {{- if $validation -}}
    {{- $validationEnabled = ternary $validation.enabled true (hasKey $validation "enabled") -}}
  {{- end }}
  {{- $releaseNamespace := .releaseNamespace }}
  {{- $chartName := .chartName }}
  {{- $useDynamicConfiguration := .useDynamicConfiguration }}
  {{- $issuers := $titanSideCars.issuers }}
  {{- $ingress := $titanSideCars.ingress }}
  {{- $egress := $titanSideCars.egress }}
  {{- $envoy := $titanSideCars.envoy }}
  {{- $circuitLocal := $envoy.localCircuitBreakers  }}
  {{- $circuitRemote := $envoy.remoteCircuitBreakers  }}
  {{- $clusters := $envoy.clusters }}
  {{- $localApp := index $clusters "local-myapp" }}
  {{- $remoteApp := index $clusters "remote-myapp" }}
  {{- $gateway := $localApp.gateway }}
  {{- $gatewayEnable := $gateway.enabled }}
  {{- $defaultBackend := "local-myapp" }}
  {{- $addAdditionalClustersForFilters := $envoy.filterClusters }}
  {{- if $gatewayEnable }} 
    {{- $defaultBackend = $gateway.defaultBackend | default "" }}  
  {{- end }}
  {{- $myClusters := dict }}
  {{- range $cluster, $value := $clusters }}
    {{- if eq $cluster "local-myapp" }}
      {{- if eq $defaultBackend "local-myapp" }}
    - name: local-myapp
        {{- if $useDynamicConfiguration }}
      "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
        {{- end }}
      type: {{ $localApp.type | default "STATIC" }}
      dns_lookup_family: V4_ONLY
      lb_policy: LEAST_REQUEST
        {{- include "titan-mesh-helm-lib-chart.envoy.httpoptions" (dict "httpScheme" $localApp.scheme  "cluster" $localApp ) | nindent 6 }}
      connect_timeout: {{ $localApp.connectionTimeout | default "0.25s" }}
      common_lb_config:
        healthy_panic_threshold:
          value: {{ $localApp.healthyPanicThreshold | default "25" }}
        {{- $outlierDetection := $localApp.outlierDetection }}
        {{- $hasOutlierDetection := false }}
        {{- if $outlierDetection }}
          {{- $hasOutlierDetection = true }}
        {{- end }}
      outlier_detection:
        enforcing_consecutive_5xx: {{ ternary ($outlierDetection.enforcingConsecutive5xx | default "0") "0" $hasOutlierDetection }}
        enforcing_success_rate: {{ ternary ($outlierDetection.enforcingSuccessRate | default "0") "0" $hasOutlierDetection }}
        enforcing_consecutive_gateway_failure: {{ ternary ($outlierDetection.enforcingConsecutiveGatewayFailure | default "0") "0" $hasOutlierDetection }}
        enforcing_failure_percentage: {{ ternary ($outlierDetection.enforcingFailurePercentage | default "0") "0" $hasOutlierDetection }}
        {{- if (ternary ($outlierDetection.splitExternalLocalOriginErrors | default false) false $hasOutlierDetection) }}
        split_external_local_origin_errors: true  
        enforcing_consecutive_local_origin_failure: {{ ternary ($outlierDetection.enforcingConsecutiveLocalOriginFailure | default "0") "0" $hasOutlierDetection }}
        enforcing_local_origin_success_rate: {{ ternary ($outlierDetection.enforcingLocalOriginSuccessRate | default "0") "0" $hasOutlierDetection }}
        enforcing_failure_percentage_local_origin: {{ ternary ($outlierDetection.enforcingFailurePercentageLocalOrigin | default "0") "0" $hasOutlierDetection }}
        {{- end }}
        {{- $circuitBreakers := mergeOverwrite ($circuitLocal | default dict) ( $localApp.circuitBreakers | default dict) }}
      circuit_breakers:
        thresholds:
        - priority: "DEFAULT"
        {{- if $circuitBreakers.maxConnections }}
          max_connections: {{ $circuitBreakers.maxConnections }}
        {{- end }}
        {{- if $circuitBreakers.maxRequests }}
          max_requests: {{ $circuitBreakers.maxRequests }}
        {{- end }}
        {{- if $circuitBreakers.maxPendingRequests }}
          max_pending_requests: {{ $circuitBreakers.maxPendingRequests }}
        {{- end }}
          track_remaining: {{ $circuitBreakers.trackRemaining | default "true" }}
          retry_budget:
            budget_percent:
              value: {{ $circuitBreakers.retryBudgetPercentage | default "20.0" }}
            min_retry_concurrency: {{ $circuitBreakers.minRetryConcurrency | default "3" }}
      health_checks:
      - http_health_check:
          path: {{ required "value 'titanSideCars.envoy.clusters.local-myapp.healthChecks.path' is required" $localApp.healthChecks.path }}
        interval: {{ $localApp.healthChecks.interval | default "1s" }}
        timeout: {{ $localApp.healthChecks.timeout | default "1s" }}
        healthy_threshold: {{ coalesce $localApp.healthyThreshold "1" }}
        unhealthy_threshold: {{ $localApp.healthChecks.unhealthyThreahold | default "1" }}
        no_traffic_interval: {{ $localApp.healthChecks.noTrafficInterval | default "3s" }}
      load_assignment:
        cluster_name: local-myapp
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: {{ $localApp.address | default "127.0.0.1" }}
                  port_value: {{  $localApp.port | default "8080" }}
        {{- include "titan-mesh-helm-lib-chart.envoy.filter.cluster-transport" (dict "httpScheme" $localApp.scheme  "envoy" $envoy) | nindent 6 }}
      {{- end }}
    {{- else }}
      {{- $setupCluster := true }}
      {{- if not $gatewayEnable }}
        {{- $setupCluster = false }}
        {{- range $egress.routes }}
          {{- if .route }}
            {{- if .route.cluster }} 
              {{- if eq .route.cluster $cluster }}
                {{- $setupCluster = true  }}
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
        {{- range $ingress.routes }}
          {{- if .route }}
            {{- if .route.cluster }} 
              {{- if eq .route.cluster $cluster }}
                {{- $setupCluster = true }}
              {{- end }}
            {{- end }}           
          {{- end }}
        {{- end }}
        {{- range $addAdditionalClustersForFilters }}
          {{- if eq . $cluster }}
            {{- $setupCluster = true }}
          {{- end }}
        {{- end }}
        {{- if and (hasPrefix "local-" $cluster) (not $setupCluster) }}
          {{- if hasKey $value "enabled" }}
            {{- if $value.enabled }}
              {{- $setupCluster = true -}}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if $setupCluster }}
        {{- if or (not $gatewayEnable) (and $gatewayEnable (ne $cluster "remote-myapp")) }}
          {{- $_ := set $myClusters $cluster "created"  }}
    - name: {{ $cluster }}
          {{- if $useDynamicConfiguration }}
      "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
          {{- end }}
          {{- $clusterValue := mergeOverwrite (deepCopy ($remoteApp | default dict)) $value }}
          {{- if $validationEnabled -}}
            {{- $_ := set $clusterValue "address" "myapp" -}}
            {{- $_ := set $clusterValue "targetPort" "8080" -}}
            {{- $_ := set $clusterValue "port" "8080" -}}
            {{- $_ := set $clusterValue "type" "STRICT_DNS" -}}
            {{- $_ := set $clusterValue "scheme" "HTTP" -}}
            {{- $_ := set $clusterValue "hostname" $cluster -}}
            {{- $_ := unset $clusterValue "ip" -}}
          {{- end -}}
          {{- $serviceName := $clusterValue.alias | default $cluster }}
          {{- $serviceName = printf "%s%s" $serviceName (include "titan-mesh-helm-lib-chart.nameExt" $titanSideCars) }}
          {{- if $clusterValue.external }}
            {{- $serviceName = $clusterValue.alias | default $cluster }}
          {{- end }}
          {{- $clusterAddress := $clusterValue.address | default (printf "%s.%s.svc.cluster.local" $serviceName ($clusterValue.namespace | default $releaseNamespace )) }}
          {{- $clusterIpAddress := $clusterValue.ip | default $clusterAddress }}
          {{- $clusterHostname := $clusterValue.hostname | default $clusterAddress }}
          {{- $clusterType := $clusterValue.type | default "STRICT_DNS" }}
      connect_timeout: {{ $clusterValue.connectionTimeout | default (ternary "0.25s" "1s" (hasPrefix "local-" $cluster)) }}
      {{- if $clusterValue.dnsRefreshRate }}
      dns_refresh_rate: {{ $clusterValue.dnsRefreshRate }}
      {{- end }}
      type: {{ $clusterType }}
      ignore_health_on_host_removal: true
      dns_lookup_family: V4_ONLY
          {{- $outlierDetection := $clusterValue.outlierDetection }}
          {{- $hasOutlierDetection := false }}
          {{- if $outlierDetection }}
            {{- $hasOutlierDetection = true }}
          {{- end }}
      outlier_detection:
        enforcing_consecutive_5xx: {{ ternary ($outlierDetection.enforcingConsecutive5xx | default "0") "0" $hasOutlierDetection }}
        enforcing_success_rate: {{ ternary ($outlierDetection.enforcingSuccessRate | default "0") "0" $hasOutlierDetection }}
        enforcing_consecutive_gateway_failure: {{ ternary ($outlierDetection.enforcingConsecutiveGatewayFailure | default "0") "0" $hasOutlierDetection }}
        enforcing_failure_percentage: {{ ternary ($outlierDetection.enforcingFailurePercentage | default "0") "0" $hasOutlierDetection }}
          {{- if (ternary ($outlierDetection.splitExternalLocalOriginErrors | default false) false $hasOutlierDetection) }}
        split_external_local_origin_errors: true  
        enforcing_consecutive_local_origin_failure: {{ ternary ($outlierDetection.enforcingConsecutiveLocalOriginFailure | default "0") "0" $hasOutlierDetection }}
        enforcing_local_origin_success_rate: {{ ternary ($outlierDetection.enforcingLocalOriginSuccessRate | default "0") "0" $hasOutlierDetection }}
        enforcing_failure_percentage_local_origin: {{ ternary ($outlierDetection.enforcingFailurePercentageLocalOrigin | default "0") "0" $hasOutlierDetection }}
          {{- end }}
          {{- $circuitBreakers := mergeOverwrite ((ternary $circuitLocal $circuitRemote (hasPrefix "local-" $cluster)) | default dict) ( $clusterValue.circuitBreakers | default dict) }}
      circuit_breakers:
        thresholds:
        - priority: "DEFAULT"
        {{- if $circuitBreakers.maxConnections }}
          max_connections: {{ $circuitBreakers.maxConnections }}
        {{- end }}
        {{- if $circuitBreakers.maxRequests }}
          max_requests: {{ $circuitBreakers.maxRequests }}
        {{- end }}
        {{- if $circuitBreakers.maxPendingRequests }}
          max_pending_requests: {{ $circuitBreakers.maxPendingRequests }}
        {{- end }}
          track_remaining: {{ $circuitBreakers.trackRemaining | default "true" }}
          retry_budget:
            budget_percent:
              value: {{ $circuitBreakers.retryBudgetPercentage | default "20.0" }}
            min_retry_concurrency: {{ $circuitBreakers.minRetryConcurrency | default "3" }}
        {{- $scheme := ternary ( $clusterValue.scheme | default "HTTP") ( $clusterValue.scheme | default "HTTP2") (hasPrefix "local-" $cluster) }}
        {{- include "titan-mesh-helm-lib-chart.envoy.httpoptions" (dict "httpScheme" $scheme "cluster" (index $clusters $cluster)) | nindent 6 }}
      lb_policy: {{ $clusterValue.lbPolicy | default "LEAST_REQUEST" }}
      load_assignment:
        cluster_name: {{ $cluster }}
        endpoints:
        - lb_endpoints:
          - endpoint:
              hostname: {{ $clusterHostname }}
              address:
                socket_address:
                  address: {{ ternary "127.0.0.1" $clusterIpAddress (hasPrefix "local-" $cluster) }}
            {{- if $gatewayEnable }}
                  port_value: {{ coalesce $clusterValue.targetPort $clusterValue.port "9443" }}
            {{- else }}
                  port_value: {{ $clusterValue.port | default "9443" }}
            {{- end }}
      common_lb_config:
        healthy_panic_threshold:
          value: {{  $clusterValue.healthyPanicThreshold | default "25" }}
      health_checks:
          {{- $healthCheck :=  $clusterValue.healthChecks  }}
      - http_health_check: 
          path: {{ $healthCheck.path | default "/healthz" }}
        interval: {{ $healthCheck.interval | default "1s" }}
        timeout: {{ $healthCheck.timeout | default "1s" }}
        healthy_threshold: {{ $healthCheck.healthyThreahold | default "1" }}
        unhealthy_threshold: {{ $healthCheck.unhealthyThreahold | default "1" }}
        no_traffic_interval: {{ $healthCheck.noTrafficInterval | default "3s" }}
          {{- include "titan-mesh-helm-lib-chart.envoy.filter.cluster-transport" (dict "httpScheme" $scheme  "envoy" $envoy "sni" $clusterAddress) | nindent 6 }}
        {{- end }}
      {{- end }}
    {{- end }}  
  {{- end }}
  {{- range $issuers }}
    {{ $cluster := required "value 'titanSideCars.issuers[].cluster' is required" .cluster }}
    {{- if and (ne $cluster $chartName) (not (hasKey $myClusters $cluster)) }}
      {{- $_ := set $myClusters $cluster "created"  }}
      {{- $clusterValue := index $clusters $cluster }} 
      {{- $serviceName := printf "%s%s" $cluster (include "titan-mesh-helm-lib-chart.nameExt" $titanSideCars) }}
      {{- $clusterAddress := $clusterValue.address | default (printf "%s.%s.svc.cluster.local" $serviceName ($clusterValue.namespace | default $releaseNamespace )) }}
      {{- $clusterIpAddress := $clusterValue.ip | default $clusterAddress }}
      {{- $clusterType := $clusterValue.type | default "STRICT_DNS" }}
    - name: {{ $cluster }}
      {{- if $useDynamicConfiguration }}
      "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
      {{- end }}
      {{- if .external }}
        {{- $serviceName = $cluster }}
      {{- end }}
      connect_timeout: {{ $clusterValue.connectionTimeout | default (ternary "0.25s" "3s" (hasPrefix "local-" $cluster)) }}
      type: {{ $clusterType }}
      ignore_health_on_host_removal: true
      dns_lookup_family: V4_ONLY
      {{- $scheme := ternary ( $clusterValue.scheme | default "HTTP") ( $clusterValue.scheme | default "HTTP2") (hasPrefix "local-" $cluster) }}
      {{- include "titan-mesh-helm-lib-chart.envoy.httpoptions" (dict "httpScheme" $scheme "cluster" $clusterValue) | nindent 6 }}
      lb_policy: LEAST_REQUEST
      load_assignment:
        cluster_name: {{ $cluster }}
        endpoints:
        - lb_endpoints:
          - endpoint:
            {{- if ne $clusterIpAddress $clusterAddress }}
              hostname: {{ $clusterAddress }}
            {{- end }}
              address:
                socket_address:
                  address: {{ $clusterIpAddress }}
                  port_value: {{ $clusterValue.port | default "9443" }}
      common_lb_config:
        healthy_panic_threshold:
          value: {{  $clusterValue.healthyPanicThreshold | default "25" }}
      health_checks:
          {{- $healthCheck :=  $clusterValue.healthChecks  }}
      - http_health_check: 
          path: {{ $healthCheck.path | default "/healthz" }}
        interval: {{ $healthCheck.interval | default "5s" }}
        timeout: {{ $healthCheck.timeout | default "2s" }}
        healthy_threshold: {{ $healthCheck.healthyThreahold | default "1" }}
        unhealthy_threshold: {{ $healthCheck.unhealthyThreahold | default "1" }}
        no_traffic_interval: {{ $healthCheck.noTrafficInterval | default "3s" }}
      {{- include "titan-mesh-helm-lib-chart.envoy.filter.cluster-transport" (dict "httpScheme" $scheme  "envoy" $envoy "sni" $clusterAddress) | nindent 6 }}
    {{- end }}
  {{- end }}
  {{- $ratelimit := $titanSideCars.ratelimit -}}
  {{- $ratelimitMonitorByEnvoy := $ratelimit.monitorByEnvoy -}}
  {{- $ratelimitEnabled := eq (include "static.titan-mesh-helm-lib-chart.ratelimitEnabled" $titanSideCars) "true" -}}
  {{- $opaEnabled := eq (include "static.titan-mesh-helm-lib-chart.opaEnabled" $titanSideCars) "true" -}}
  {{- $opa := $titanSideCars.opa -}}
  {{- $opaMonitorByEnvoy := $opa.monitorByEnvoy -}}
  {{- $gateway := $localApp.gateway }}
  {{- $gatewayEnable := $gateway.enabled }}
  {{- $routes := list }}
  {{- if $gatewayEnable }}
    {{- range $cn, $cv := $clusters }}
      {{- if and (ne $cn "local-myapp") (ne $cn "remote-myapp") }}
        {{- range $cv.routes }}
          {{- $newcluster := dict "cluster" $cn }}
          {{- $routes = append $routes (dict "match" .match "route" $newcluster "ratelimit" .ratelimit) }}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- else }}
    {{- $routes = $ingress.routes }}
    {{- if and $ingress (not $routes) }}
      {{- if ternary $ingress.enabled true (hasKey $ingress "enabled") }}
        {{ $routes = $localApp.routes }}
      {{- end }}
    {{- end }}
    {{- $additionalRoutes := $ingress.additionalRoutes }}
    {{- if $additionalRoutes }}
      {{- if $routes }}
        {{- $routes = concat $additionalRoutes $routes }}
      {{- else }}
        {{- $routes = $additionalRoutes }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- if $ratelimitEnabled }}
    - name: ratelimit
    {{- if $useDynamicConfiguration }}
      "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
    {{- end }}
      type: {{ $ratelimit.type | default "STATIC" }}
      dns_lookup_family: V4_ONLY
      lb_policy: LEAST_REQUEST      
      connect_timeout: 1s
      protocol_selection: USE_CONFIGURED_PROTOCOL
      http2_protocol_options: {}
      circuit_breakers:
        thresholds:
        - priority: "DEFAULT"
          max_requests: 409600
          max_pending_requests: 204800
          retry_budget:
            budget_percent:
              value: 20.0
            min_retry_concurrency: 3
      load_assignment:
        cluster_name: ratelimit
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: {{ $ratelimit.address | default "127.0.0.1" }}
                  port_value: {{ $ratelimit.port | default "8081" }}
    {{- if $ratelimitMonitorByEnvoy }}
    - name: ratelimit-health
      {{- if $useDynamicConfiguration }}
      "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
      {{- end }}
      type: {{ $ratelimit.healthCheckType| default "STATIC" }}
      dns_lookup_family: V4_ONLY
      lb_policy: LEAST_REQUEST
      connect_timeout: {{ $ratelimit.healthConnectTimeout | default "0.25s" }}
      common_lb_config:
        healthy_panic_threshold:
          value: 25
      health_checks:
      - http_health_check:
          path: {{ $ratelimit.healthCheckPath | default "/healthcheck" }}
        interval: {{ $ratelimit.healthCheckInterval |  default "3s" }}
        timeout: {{ $ratelimit.healthCheckTimeout |  default "2s" }}
        healthy_threshold: {{ $ratelimit.healthThreshold |  default "1" }}
        unhealthy_threshold: {{ $ratelimit.unhealthThreshold |  default "1" }}
        no_traffic_interval: {{ $ratelimit.noTrafficInterval | default "3s" }}
      load_assignment:
        cluster_name: ratelimit-health
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: {{ $ratelimit.healthCheckAddress | default "127.0.0.1" }}
                  port_value: {{ $ratelimit.healthCheckPort | default "8070" }}
    {{- end }} 
  {{- end }}
  {{- if and $opaEnabled $opaMonitorByEnvoy }}
    - name: opa-health
    {{- if $useDynamicConfiguration }}
      "@type": type.googleapis.com/envoy.config.cluster.v3.Cluster
    {{- end }}
      type: STATIC
      dns_lookup_family: V4_ONLY
      lb_policy: LEAST_REQUEST     
      connect_timeout: {{ $opa.healthConnectTimeout |  default "0.25s" }}
      common_lb_config:
        healthy_panic_threshold:
          value: 25
      health_checks:
      - http_health_check:
          path: {{ $opa.healthCheckPath | default "/health?plugins" }}
        interval: {{ $opa.healthCheckInterval |  default "3s" }}
        timeout: {{ $opa.healthCheckTimeout |  default "2s" }}
        healthy_threshold: {{ $opa.healthThreshold |  default "1" }}
        unhealthy_threshold: {{ $opa.unhealthThreshold |  default "1" }}
        no_traffic_interval: {{ $opa.noTrafficInterval | default "3s" }}
      load_assignment:
        cluster_name: opa-health
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: 127.0.0.1
                  port_value: {{ $opa.healthCheckPort | default "8282" }}
  {{- end }}
{{- end }}
