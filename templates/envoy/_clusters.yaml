{{- define "titan-mesh-helm-lib-chart.envoy.clusters" }}
  {{- $titanSideCars := .titanSideCars }}
  {{- $releaseNamespace := .releaseNamespace }}
  {{- $chartName := .chartName }}
  {{- $issuers := $titanSideCars.issuers }}
  {{- $ingress := $titanSideCars.ingress }}
  {{- $egress := $titanSideCars.egress }}
  {{- $envoy := $titanSideCars.envoy }}
  {{- $circuitLocal := $envoy.localCircuitBreakers  }}
  {{- $circuitRemote := $envoy.remoteCircuitBreakers  }}
  {{- $clusters := $envoy.clusters }}
  {{- $localApp := index $clusters "local-myapp" }}
  {{- $gateway := $localApp.gateway }}
  {{- $gatewayEnable := $gateway.enabled }}
  {{- $defaultBackend := "local-myapp" }}
  {{- if $gatewayEnable }} 
    {{- $defaultBackend = $gateway.defaultBackend | default "" }}  
  {{- end }}
  {{- $myClusters := dict }}
    clusters:
  {{- range $cluster, $value := $clusters }}
    {{- if eq $cluster "local-myapp" }}
      {{- if eq $defaultBackend "local-myapp" }}
    - name: local-myapp
      type: STATIC
      dns_lookup_family: V4_ONLY
      lb_policy: LEAST_REQUEST
        {{- include "titan-mesh-helm-lib-chart.envoy.httpoptions" (dict "httpScheme" $localApp.scheme  "cluster" $localApp "addSocket" true) | nindent 6 }}
      connect_timeout: {{ $localApp.connectionTimeout | default "0.25s" }}
      common_lb_config:
        healthy_panic_threshold:
          value: {{ $localApp.healthyPanicThreshold | default "25" }} 
        {{- $circuitBreakers := mergeOverwrite ($circuitLocal | default dict) ( $localApp.circuitBreakers | default dict) }}
      circuit_breakers:
        thresholds:
        - max_connections: {{ $circuitBreakers.maxConnections | default "1024" }}
          max_requests: {{ $circuitBreakers.maxRequests | default "1024" }}
          max_pending_requests: {{ $circuitBreakers.maxPendingRequests | default "1024" }}
          max_retries: {{ $circuitBreakers.maxRetries | default "3" }}
      health_checks:
      - http_health_check:
          path: {{ required "value 'titanSideCars.envoy.clusters.local-myapp.healthChecks.path' is required" $localApp.healthChecks.path }}
        interval: {{ $localApp.healthChecks.interval | default "1s" }}
        timeout: {{ $localApp.healthChecks.timeout | default "1s" }}
        healthy_threshold: {{ coalesce $localApp.healthyThreshold "1" }}
        unhealthy_threshold: {{ $localApp.healthChecks.unhealthyThreahold | default "1" }}
      load_assignment:
        cluster_name: local-myapp
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: 127.0.0.1
                  port_value: {{  $localApp.port | default "8080" }}
      {{- end }}
    {{- else }}
      {{- $setupCluster := true }}
      {{- if not $gatewayEnable }}
        {{- $setupCluster = false }}
        {{- range $egress.routes }}
          {{- if .route }}
            {{- if .route.cluster }} 
              {{- if eq .route.cluster $cluster }}
                {{- $setupCluster = true  }}
              {{- end }}
            {{- end }}           
          {{- end }}
        {{- end }}
        {{- range $ingress.routes }}
          {{- if .route }}
            {{- if .route.cluster }} 
              {{- if eq .route.cluster $cluster }}
                {{- $setupCluster = true  }}
              {{- end }}
            {{- end }}           
          {{- end }}
        {{- end }}
        {{- if and (hasPrefix "local-" $cluster) (not $setupCluster) }}
          {{- if hasKey $value "enabled" }}
            {{- if $value.enabled }}
              {{- $setupCluster = true -}}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if $setupCluster }}
        {{- if or (not $gatewayEnable) (and $gatewayEnable (ne $cluster "remote-myapp")) }}
          {{- $_ := set $myClusters $cluster "created"  }}
    - name: {{ $cluster }}
          {{- $serviceName := $value.alias | default $cluster }}
          {{- $serviceName = printf "%s%s" $serviceName (include "titan-mesh-helm-lib-chart.nameExt" $titanSideCars) }}
          {{- if $value.external }}
            {{- $serviceName = $value.alias | default $cluster }}
          {{- end }}
          {{- $clusterAddress := $value.address | default (printf "%s.%s.svc.cluster.local" $serviceName ($value.namespace | default $releaseNamespace )) }}
      connect_timeout: {{ $value.connectionTimeout | default (ternary "0.25s" "1s" (hasPrefix "local-" $cluster)) }}
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
          {{- $circuitBreakers := mergeOverwrite ((ternary $circuitLocal $circuitRemote (hasPrefix "local-" $cluster)) | default dict) ($value.circuitBreakers | default dict) }}
      circuit_breakers:
        thresholds:
        - max_connections: {{ $circuitBreakers.maxConnections | default "1024" }}
          max_requests: {{ $circuitBreakers.maxRequests | default "1024" }}
          max_pending_requests: {{ $circuitBreakers.maxPendingRequests | default "1024" }}
          max_retries: {{ $circuitBreakers.maxRetries | default (ternary "256" "3" (hasPrefix "local-" $cluster)) }}
          {{- $scheme := ternary ($value.scheme | default "HTTP") ($value.scheme | default "HTTP2") (hasPrefix "local-" $cluster) }}
          {{- $sni := ternary $clusterAddress "" (or $value.sniValidation (hasKey $value "address") | default false) }}
          {{- include "titan-mesh-helm-lib-chart.envoy.httpoptions" (dict "httpScheme" $scheme "addSocket" true "sni" $sni "cluster" (index $clusters $cluster)) | nindent 6 }}
      lb_policy: LEAST_REQUEST
      load_assignment:
        cluster_name: {{ $cluster }}
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: {{ ternary "127.0.0.1" $clusterAddress (hasPrefix "local-" $cluster) }}
                  port_value: {{ $value.port | default "9443" }}
      common_lb_config:
        healthy_panic_threshold:
          value: {{ $value.healthyPanicThreshold | default "25" }}
      health_checks:
          {{- $healthCheck := $value.healthChecks  }}
      - http_health_check: 
          path: {{ $healthCheck.path | default "/healthz" }}
        interval: {{ $healthCheck.interval | default "1s" }}
        timeout: {{ $healthCheck.timeout | default "1s" }}
        healthy_threshold: {{ $healthCheck.healthyThreahold | default "1" }}
        unhealthy_threshold: {{ $healthCheck.unhealthyThreahold | default "1" }}
        {{- end }}
      {{- end }}
    {{- end }}  
  {{- end }}
  {{- range $issuers }}
    {{ $cluster := required "value 'titanSideCars.issuers[].cluster' is required" .cluster }}
    {{- if and (ne $cluster $chartName) (not (hasKey $myClusters $cluster)) }}
      {{- $_ := set $myClusters $cluster "created"  }}
    - name: {{ $cluster }}
      {{- $serviceName := printf "%s%s" $cluster (include "titan-mesh-helm-lib-chart.nameExt" $titanSideCars) }}
      {{- if .external }}
        {{- $serviceName = $cluster }}
      {{- end }}
      {{- $clusterAddress := .address | default (printf "%s.%s.svc.cluster.local" $serviceName (.namespace | default $releaseNamespace)) }}
      connect_timeout: "3s"
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      {{- $scheme := .scheme | default "HTTPS" }}
      {{- if ne $scheme "HTTP" }}
        {{- if or (eq $scheme "HTTP2") (eq $scheme "H2C") }}
      http2_protocol_options: {}
        {{- end }}
        {{- if ne $scheme "H2C" }}
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          {{- if or .address .sniValidation }}
          sni: {{ $clusterAddress }}
          {{- end }}
        {{- end }}
      {{- end }}
      lb_policy: LEAST_REQUEST
      load_assignment:
        cluster_name: {{ $cluster }}
        endpoints:
        - lb_endpoints:
          - endpoint:
              address:
                socket_address:
                  address: {{ $clusterAddress }}
                  port_value: {{ .port | default "9443" }}
      common_lb_config:
        healthy_panic_threshold:
          value: {{ .healthyPanicThreshold | default "25" }}
      {{- $healthCheck := .healtChecks  }}
      health_checks:
      - http_health_check: 
          path: {{ $healthCheck.path | default "/healthz" }}
        interval: {{ $healthCheck.interval | default "5s" }}
        timeout: {{ $healthCheck.timeout | default "1s" }}
        healthy_threshold: {{ $healthCheck.healthyThreahold | default "1" }}
        unhealthy_threshold: {{ $healthCheck.unhealthyThreahold | default "1" }}
    {{- end }}
  {{- end }}
{{- end }}